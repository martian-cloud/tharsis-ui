"""
Provides a scalar specification URL for specifying the behavior of custom scalar types.
"""
directive @specifiedBy(
  """
  The URL should point to a human-readable specification of the data format, serialization, and coercion rules.
  """
  url: String!
) on SCALAR

type _Service {
  sdl: String!
}

type ActivityEvent implements Node {
  id: ID!
  metadata: ResourceMetadata!
  initiator: Initiator!
  namespacePath: String
  action: ActivityEventAction!
  target: Node!
  targetType: ActivityEventTargetType!
  targetId: String!
  payload: ActivityEventPayload
}

enum ActivityEventAction {
  ADD
  APPLY
  CANCEL
  CREATE
  DELETE
  LOCK
  MIGRATE
  REMOVE
  SET_VARIABLES
  UNLOCK
  UPDATE
  ADD_MEMBER
  REMOVE_MEMBER
  UPDATE_MEMBER
  CREATE_MEMBERSHIP
  REMOVE_MEMBERSHIP
  DELETE_CHILD_RESOURCE
}

type ActivityEventAddTeamMemberPayload {
  user: User
  maintainer: Boolean!
}

type ActivityEventConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ActivityEventEdge]
}

type ActivityEventCreateNamespaceMembershipPayload {
  member: Member
  role: String!
}

type ActivityEventDeleteChildResourcePayload {
  name: String!
  id: String!
  type: String!
}

type ActivityEventEdge {
  cursor: String!
  node: ActivityEvent
}

type ActivityEventMigrateGroupPayload {
  previousGroupPath: String!
}

type ActivityEventMoveManagedIdentityPayload {
  previousGroupPath: String!
}

union ActivityEventPayload = ActivityEventCreateNamespaceMembershipPayload | ActivityEventUpdateNamespaceMembershipPayload | ActivityEventRemoveNamespaceMembershipPayload | ActivityEventDeleteChildResourcePayload | ActivityEventAddTeamMemberPayload | ActivityEventRemoveTeamMemberPayload | ActivityEventUpdateTeamMemberPayload | ActivityEventMigrateGroupPayload | ActivityEventMoveManagedIdentityPayload

type ActivityEventRemoveNamespaceMembershipPayload {
  member: Member
}

type ActivityEventRemoveTeamMemberPayload {
  user: User
}

enum ActivityEventSort {
  CREATED_ASC
  CREATED_DESC
  NAMESPACE_PATH_ASC
  NAMESPACE_PATH_DESC
  ACTION_ASC
  ACTION_DESC
}

enum ActivityEventTargetType {
  GPG_KEY
  GROUP
  MANAGED_IDENTITY
  MANAGED_IDENTITY_ACCESS_RULE
  NAMESPACE_MEMBERSHIP
  RUN
  SERVICE_ACCOUNT
  STATE_VERSION
  TEAM
  TEAM_MEMBER
  TERRAFORM_PROVIDER
  TERRAFORM_PROVIDER_VERSION
  TERRAFORM_MODULE
  TERRAFORM_MODULE_VERSION
  VARIABLE
  VCS_PROVIDER
  WORKSPACE
  ROLE
  RUNNER
}

type ActivityEventUpdateNamespaceMembershipPayload {
  prevRole: String!
  newRole: String!
}

type ActivityEventUpdateTeamMemberPayload {
  user: User
  maintainer: Boolean!
}

input AddUserToTeamInput {
  clientMutationId: String
  username: String!
  teamName: String!
  isMaintainer: Boolean!
}

type AddUserToTeamPayload {
  clientMutationId: String
  teamMember: TeamMember
  problems: [Problem!]!
}

type Apply implements Node {
  id: ID!
  metadata: ResourceMetadata!
  status: ApplyStatus!
  currentJob: Job
  triggeredBy: String
  comment: String!
}

input ApplyRunInput {
  clientMutationId: String
  runId: String!
  comment: String
}

enum ApplyStatus {
  canceled
  created
  errored
  finished
  pending
  queued
  running
}

input AssignManagedIdentityInput {
  clientMutationId: String
  managedIdentityId: String
  managedIdentityPath: String
  workspacePath: String!
}

type AssignManagedIdentityPayload {
  clientMutationId: String
  workspace: Workspace
  problems: [Problem!]!
}

input AssignServiceAccountToRunnerInput {
  clientMutationId: String
  runnerPath: String!
  serviceAccountPath: String!
}

type AssignServiceAccountToRunnerPayload {
  clientMutationId: String
  runner: Runner
  problems: [Problem!]!
}

type AuthSettings {
  oidcIssuerUrl: String
  oidcClientId: String
  oidcUsernameClaim: String
  oidcScope: String
  oidcLogoutUrl: String
}

input CancelRunInput {
  clientMutationId: String
  runId: String!
  comment: String
  force: Boolean
}

input ClaimJobInput {
  clientMutationId: String
  runnerPath: String!
}

type ClaimJobPayload {
  clientMutationId: String
  problems: [Problem!]!
  jobId: String
  token: String
}

type ConfigurationVersion implements Node {
  id: ID!
  metadata: ResourceMetadata!
  status: String!
  speculative: Boolean!
  workspaceId: String!
  createdBy: String!
  vcsEvent: VCSEvent
}

type ConfigurationVersionMutationPayload {
  clientMutationId: String
  configurationVersion: ConfigurationVersion
  problems: [Problem!]!
}

input CreateConfigurationVersionInput {
  clientMutationId: String
  workspacePath: String!
  speculative: Boolean
}

input CreateGPGKeyInput {
  clientMutationId: String
  asciiArmor: String!
  groupPath: String!
}

type CreateGPGKeyPayload {
  clientMutationId: String
  gpgKey: GPGKey
  problems: [Problem!]!
}

input CreateGroupInput {
  clientMutationId: String
  name: String!
  parentPath: String
  description: String!
}

type CreateGroupPayload {
  clientMutationId: String
  group: Group
  problems: [Problem!]!
}

input CreateManagedIdentityAccessRuleInput {
  clientMutationId: String
  managedIdentityId: String!
  type: ManagedIdentityAccessRuleType!
  runStage: JobType!
  moduleAttestationPolicies: [ManagedIdentityAccessRuleModuleAttestationPolicyInput!]
  allowedServiceAccounts: [String!]
  allowedUsers: [String!]
  allowedTeams: [String!]
}

input CreateManagedIdentityAliasInput {
  clientMutationId: String
  name: String!
  aliasSourceId: String
  aliasSourcePath: String
  groupPath: String!
}

type CreateManagedIdentityAliasPayload {
  clientMutationId: String
  managedIdentity: ManagedIdentity
  problems: [Problem!]!
}

input CreateManagedIdentityCredentialsInput {
  clientMutationId: String
  id: ID!
}

type CreateManagedIdentityCredentialsPayload {
  clientMutationId: String
  managedIdentityCredentials: ManagedIdentityCredentials
  problems: [Problem!]!
}

input CreateManagedIdentityInput {
  clientMutationId: String
  type: String!
  name: String!
  description: String!
  groupPath: String!
  data: String!
  accessRules: [ManagedIdentityAccessRuleInput!]
}

type CreateManagedIdentityPayload {
  clientMutationId: String
  managedIdentity: ManagedIdentity
  problems: [Problem!]!
}

input CreateNamespaceMembershipInput {
  clientMutationId: String
  namespacePath: String!
  username: String
  serviceAccountId: String
  teamName: String
  role: String!
}

input CreateNamespaceVariableInput {
  clientMutationId: String
  namespacePath: String!
  category: VariableCategory!
  hcl: Boolean!
  key: String!
  value: String!
}

input CreateRoleInput {
  clientMutationId: String
  name: String!
  description: String!
  permissions: [String!]!
}

type CreateRolePayload {
  clientMutationId: String
  role: Role
  problems: [Problem!]!
}

input CreateRunInput {
  clientMutationId: String
  workspacePath: String!
  configurationVersionId: String
  isDestroy: Boolean
  moduleSource: String
  moduleVersion: String
  comment: String
  terraformVersion: String
  variables: [RunVariableInput!]
}

input CreateRunnerInput {
  clientMutationId: String
  name: String!
  description: String!
  groupPath: String!
}

type CreateRunnerPayload {
  clientMutationId: String
  runner: Runner
  problems: [Problem!]!
}

input CreateServiceAccountInput {
  clientMutationId: String
  name: String!
  description: String!
  groupPath: String!
  oidcTrustPolicies: [OIDCTrustPolicyInput!]!
}

type CreateServiceAccountPayload {
  clientMutationId: String
  serviceAccount: ServiceAccount
  problems: [Problem!]!
}

input CreateStateVersionInput {
  clientMutationId: String
  metadata: ResourceMetadataInput
  state: String!
  runId: String!
}

type CreateStateVersionPayload {
  clientMutationId: String
  stateVersion: StateVersion
  problems: [Problem!]!
}

input CreateTeamInput {
  clientMutationId: String
  name: String!
  description: String!
}

type CreateTeamPayload {
  clientMutationId: String
  team: Team
  problems: [Problem!]!
}

input CreateTerraformCLIDownloadURLInput {
  version: String!
  os: String!
  architecture: String!
}

input CreateTerraformModuleAttestationInput {
  clientMutationId: String
  modulePath: String!
  description: String
  attestationData: String!
}

type CreateTerraformModuleAttestationPayload {
  clientMutationId: String
  moduleAttestation: TerraformModuleAttestation
  problems: [Problem!]!
}

input CreateTerraformModuleInput {
  clientMutationId: String
  groupPath: String!
  name: String!
  system: String!
  private: Boolean
  repositoryUrl: String
}

type CreateTerraformModulePayload {
  clientMutationId: String
  module: TerraformModule
  problems: [Problem!]!
}

input CreateTerraformModuleVersionInput {
  clientMutationId: String
  modulePath: String!
  version: String!
  shaSum: String!
}

type CreateTerraformModuleVersionPayload {
  clientMutationId: String
  moduleVersion: TerraformModuleVersion
  problems: [Problem!]!
}

input CreateTerraformProviderInput {
  clientMutationId: String
  groupPath: String!
  name: String!
  private: Boolean
  repositoryUrl: String
}

type CreateTerraformProviderPayload {
  clientMutationId: String
  provider: TerraformProvider
  problems: [Problem!]!
}

input CreateTerraformProviderPlatformInput {
  clientMutationId: String
  providerVersionId: String!
  os: String!
  arch: String!
  shaSum: String!
  filename: String!
}

type CreateTerraformProviderPlatformPayload {
  clientMutationId: String
  providerPlatform: TerraformProviderPlatform
  problems: [Problem!]!
}

input CreateTerraformProviderVersionInput {
  clientMutationId: String
  providerPath: String!
  version: String!
  protocols: [String!]!
}

type CreateTerraformProviderVersionPayload {
  clientMutationId: String
  providerVersion: TerraformProviderVersion
  problems: [Problem!]!
}

input CreateVCSProviderInput {
  clientMutationId: String
  name: String!
  description: String!
  groupPath: String!
  url: String
  oAuthClientId: String!
  oAuthClientSecret: String!
  type: VCSProviderType!
  autoCreateWebhooks: Boolean!
}

type CreateVCSProviderPayload {
  clientMutationId: String
  vcsProvider: VCSProvider
  oAuthAuthorizationUrl: String!
  problems: [Problem!]!
}

input CreateVCSRunInput {
  clientMutationId: String
  workspacePath: String!
  referenceName: String
  isDestroy: Boolean
}

type CreateVCSRunPayload {
  clientMutationId: String
  problems: [Problem!]!
}

input CreateWorkspaceInput {
  clientMutationId: String
  name: String!
  description: String!
  groupPath: String!
  maxJobDuration: Int
  terraformVersion: String
  preventDestroyPlan: Boolean
}

type CreateWorkspacePayload {
  clientMutationId: String
  workspace: Workspace
  problems: [Problem!]!
}

input CreateWorkspaceVCSProviderLinkInput {
  clientMutationId: String
  moduleDirectory: String
  repositoryPath: String!
  workspacePath: String!
  providerId: String!
  branch: String
  tagRegex: String
  globPatterns: [String!]!
  autoSpeculativePlan: Boolean!
  webhookDisabled: Boolean!
}

type CreateWorkspaceVCSProviderLinkPayload {
  clientMutationId: String
  vcsProviderLink: WorkspaceVCSProviderLink
  webhookToken: String
  webhookUrl: String
  problems: [Problem!]!
}

input DeleteGPGKeyInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
}

type DeleteGPGKeyPayload {
  clientMutationId: String
  gpgKey: GPGKey
  problems: [Problem!]!
}

input DeleteGroupInput {
  clientMutationId: String
  groupPath: String
  id: String
  force: Boolean
  metadata: ResourceMetadataInput
}

type DeleteGroupPayload {
  clientMutationId: String
  group: Group
  problems: [Problem!]!
}

input DeleteManagedIdentityAccessRuleInput {
  clientMutationId: String
  id: ID!
}

input DeleteManagedIdentityAliasInput {
  clientMutationId: String
  id: ID!
  force: Boolean
  metadata: ResourceMetadataInput
}

type DeleteManagedIdentityAliasPayload {
  clientMutationId: String
  managedIdentity: ManagedIdentity
  problems: [Problem!]!
}

input DeleteManagedIdentityInput {
  clientMutationId: String
  id: ID!
  force: Boolean
  metadata: ResourceMetadataInput
}

type DeleteManagedIdentityPayload {
  clientMutationId: String
  managedIdentity: ManagedIdentity
  problems: [Problem!]!
}

input DeleteNamespaceMembershipInput {
  clientMutationId: String
  id: String!
  metadata: ResourceMetadataInput
}

input DeleteNamespaceVariableInput {
  clientMutationId: String
  id: String!
}

input DeleteRoleInput {
  clientMutationId: String
  id: ID!
  force: Boolean
  metadata: ResourceMetadataInput
}

type DeleteRolePayload {
  clientMutationId: String
  role: Role
  problems: [Problem!]!
}

input DeleteRunnerInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
}

type DeleteRunnerPayload {
  clientMutationId: String
  runner: Runner
  problems: [Problem!]!
}

input DeleteServiceAccountInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
}

type DeleteServiceAccountPayload {
  clientMutationId: String
  serviceAccount: ServiceAccount
  problems: [Problem!]!
}

input DeleteTeamInput {
  clientMutationId: String
  name: String!
  metadata: ResourceMetadataInput
}

type DeleteTeamPayload {
  clientMutationId: String
  team: Team
  problems: [Problem!]!
}

input DeleteTerraformModuleAttestationInput {
  clientMutationId: String
  id: String!
}

type DeleteTerraformModuleAttestationPayload {
  clientMutationId: String
  moduleAttestation: TerraformModuleAttestation
  problems: [Problem!]!
}

input DeleteTerraformModuleInput {
  clientMutationId: String
  id: String!
}

type DeleteTerraformModulePayload {
  clientMutationId: String
  module: TerraformModule
  problems: [Problem!]!
}

input DeleteTerraformModuleVersionInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
}

type DeleteTerraformModuleVersionPayload {
  clientMutationId: String
  moduleVersion: TerraformModuleVersion
  problems: [Problem!]!
}

input DeleteTerraformProviderInput {
  clientMutationId: String
  id: String!
}

type DeleteTerraformProviderPayload {
  clientMutationId: String
  provider: TerraformProvider
  problems: [Problem!]!
}

input DeleteTerraformProviderPlatformInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
}

type DeleteTerraformProviderPlatformPayload {
  clientMutationId: String
  providerPlatform: TerraformProviderPlatform
  problems: [Problem!]!
}

input DeleteTerraformProviderVersionInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
}

type DeleteTerraformProviderVersionPayload {
  clientMutationId: String
  providerVersion: TerraformProviderVersion
  problems: [Problem!]!
}

input DeleteVCSProviderInput {
  clientMutationId: String
  id: ID!
  force: Boolean
  metadata: ResourceMetadataInput
}

type DeleteVCSProviderPayload {
  clientMutationId: String
  vcsProvider: VCSProvider
  problems: [Problem!]!
}

input DeleteWorkspaceInput {
  clientMutationId: String
  workspacePath: String
  id: String
  force: Boolean
  metadata: ResourceMetadataInput
}

type DeleteWorkspacePayload {
  clientMutationId: String
  workspace: Workspace
  problems: [Problem!]!
}

input DeleteWorkspaceVCSProviderLinkInput {
  clientMutationId: String
  id: ID!
  force: Boolean
  metadata: ResourceMetadataInput
}

type DeleteWorkspaceVCSProviderLinkPayload {
  clientMutationId: String
  vcsProviderLink: WorkspaceVCSProviderLink
  problems: [Problem!]!
}

type GPGKey implements Node {
  id: ID!
  metadata: ResourceMetadata!
  gpgKeyId: String!
  fingerprint: String!
  asciiArmor: String!
  group: Group!
  createdBy: String!
  groupPath: String!
  resourcePath: String!
}

type GPGKeyConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GPGKeyEdge]
}

type GPGKeyEdge {
  cursor: String!
  node: GPGKey
}

enum GPGKeySort {
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Group implements Node & Namespace {
  id: ID!
  metadata: ResourceMetadata!
  name: String!
  description: String!
  fullPath: String!
  createdBy: String!
  parent: Group
  gpgKeys(after: String, before: String, first: Int, last: Int, includeInherited: Boolean): GPGKeyConnection!
  descendentGroups(after: String, before: String, first: Int, last: Int, sort: GroupSort): GroupConnection!
  workspaces(after: String, before: String, first: Int, last: Int, sort: WorkspaceSort): WorkspaceConnection!
  serviceAccounts(after: String, before: String, first: Int, last: Int, includeInherited: Boolean, search: String): ServiceAccountConnection!
  managedIdentities(after: String, before: String, first: Int, last: Int, sort: ManagedIdentitySort, includeInherited: Boolean, search: String): ManagedIdentityConnection!
  terraformProviders(after: String, before: String, first: Int, last: Int, search: String): TerraformProviderConnection!
  runners(after: String, before: String, first: Int, last: Int, includeInherited: Boolean): RunnerConnection!
  memberships: [NamespaceMembership!]!
  variables: [NamespaceVariable!]!
  activityEvents(after: String, before: String, first: Int, last: Int, username: String, serviceAccountPath: String, includeNested: Boolean, timeRangeStart: Time, timeRangeEnd: Time, actions: [ActivityEventAction!], targetTypes: [ActivityEventTargetType!], sort: ActivityEventSort): ActivityEventConnection!
  vcsProviders(after: String, before: String, first: Int, last: Int, search: String, sort: VCSProviderSort, includeInherited: Boolean): VCSProviderConnection!
}

type GroupConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [GroupEdge]
}

type GroupEdge {
  cursor: String!
  node: Group
}

enum GroupSort {
  FULL_PATH_ASC
  FULL_PATH_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

union Initiator = ServiceAccount | User

type Job implements Node {
  id: ID!
  metadata: ResourceMetadata!
  status: String!
  type: JobType!
  run: Run!
  workspace: Workspace!
  timestamps: JobTimestamps!
  cancelRequested: Boolean!
  logLastUpdatedAt: Time
  maxJobDuration: Int!
  logSize: Int!
  logs(startOffset: Int!, limit: Int!): String!
  runner: Runner
  runnerPath: String
}

type JobCancellationEvent {
  job: Job!
}

input JobCancellationEventSubscriptionInput {
  jobId: String!
}

type JobLogEvent {
  action: String!
  size: Int!
}

input JobLogSubscriptionInput {
  jobId: String!
  lastSeenLogSize: Int
}

type JobTimestamps {
  queuedAt: Time
  pendingAt: Time
  runningAt: Time
  finishedAt: Time
}

enum JobType {
  plan
  apply
}

type JWTClaim {
  name: String!
  value: String!
}

input JWTClaimInput {
  name: String!
  value: String!
}

type ManagedIdentity implements Node {
  id: ID!
  metadata: ResourceMetadata!
  type: String!
  groupPath: String!
  resourcePath: String!
  name: String!
  description: String!
  group: Group!
  data: String!
  createdBy: String!
  aliasSourceId: String
  aliasSource: ManagedIdentity
  isAlias: Boolean!
  accessRules: [ManagedIdentityAccessRule!]!
  aliases(after: String, before: String, first: Int, last: Int, sort: ManagedIdentitySort): ManagedIdentityConnection!
}

type ManagedIdentityAccessRule implements Node {
  id: ID!
  metadata: ResourceMetadata!
  type: ManagedIdentityAccessRuleType!
  runStage: JobType!
  moduleAttestationPolicies: [ManagedIdentityAccessRuleModuleAttestationPolicy!]
  allowedUsers: [User!]
  allowedServiceAccounts: [ServiceAccount!]
  allowedTeams: [Team!]
  managedIdentity: ManagedIdentity!
}

input ManagedIdentityAccessRuleInput {
  runStage: JobType!
  type: ManagedIdentityAccessRuleType!
  moduleAttestationPolicies: [ManagedIdentityAccessRuleModuleAttestationPolicyInput!]
  allowedServiceAccounts: [String!]
  allowedUsers: [String!]
  allowedTeams: [String!]
}

type ManagedIdentityAccessRuleModuleAttestationPolicy {
  publicKey: String!
  predicateType: String
}

input ManagedIdentityAccessRuleModuleAttestationPolicyInput {
  publicKey: String!
  predicateType: String
}

type ManagedIdentityAccessRuleMutationPayload {
  clientMutationId: String
  accessRule: ManagedIdentityAccessRule
  problems: [Problem!]!
}

enum ManagedIdentityAccessRuleType {
  eligible_principals
  module_attestation
}

type ManagedIdentityConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ManagedIdentityEdge]
}

type ManagedIdentityCredentials {
  data: String!
}

type ManagedIdentityEdge {
  cursor: String!
  node: ManagedIdentity
}

enum ManagedIdentitySort {
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

union Member = User | ServiceAccount | Team

union MeResponse = User | ServiceAccount

input MigrateGroupInput {
  clientMutationId: String
  groupPath: String!
  newParentPath: String
}

type MigrateGroupPayload {
  clientMutationId: String
  group: Group
  problems: [Problem!]!
}

input MoveManagedIdentityInput {
  clientMutationId: String
  managedIdentityId: ID!
  newParentPath: String!
}

type MoveManagedIdentityPayload {
  clientMutationId: String
  managedIdentity: ManagedIdentity
  problems: [Problem!]!
}

"""The Mutation type represents all of the entry points into the API."""
type Mutation {
  createWorkspace(input: CreateWorkspaceInput!): CreateWorkspacePayload!
  updateWorkspace(input: UpdateWorkspaceInput!): UpdateWorkspacePayload!
  deleteWorkspace(input: DeleteWorkspaceInput!): DeleteWorkspacePayload!
  createGroup(input: CreateGroupInput!): CreateGroupPayload!
  updateGroup(input: UpdateGroupInput!): UpdateGroupPayload!
  deleteGroup(input: DeleteGroupInput!): DeleteGroupPayload!
  migrateGroup(input: MigrateGroupInput!): MigrateGroupPayload!
  createManagedIdentity(input: CreateManagedIdentityInput!): CreateManagedIdentityPayload!
  updateManagedIdentity(input: UpdateManagedIdentityInput!): UpdateManagedIdentityPayload!
  deleteManagedIdentity(input: DeleteManagedIdentityInput!): DeleteManagedIdentityPayload!
  assignManagedIdentity(input: AssignManagedIdentityInput!): AssignManagedIdentityPayload!
  unassignManagedIdentity(input: AssignManagedIdentityInput!): AssignManagedIdentityPayload!
  moveManagedIdentity(input: MoveManagedIdentityInput!): MoveManagedIdentityPayload!
  createManagedIdentityAccessRule(input: CreateManagedIdentityAccessRuleInput!): ManagedIdentityAccessRuleMutationPayload!
  updateManagedIdentityAccessRule(input: UpdateManagedIdentityAccessRuleInput!): ManagedIdentityAccessRuleMutationPayload!
  deleteManagedIdentityAccessRule(input: DeleteManagedIdentityAccessRuleInput!): ManagedIdentityAccessRuleMutationPayload!
  createManagedIdentityCredentials(input: CreateManagedIdentityCredentialsInput!): CreateManagedIdentityCredentialsPayload!
  createManagedIdentityAlias(input: CreateManagedIdentityAliasInput!): CreateManagedIdentityAliasPayload!
  deleteManagedIdentityAlias(input: DeleteManagedIdentityAliasInput!): DeleteManagedIdentityAliasPayload!
  createServiceAccount(input: CreateServiceAccountInput!): CreateServiceAccountPayload!
  updateServiceAccount(input: UpdateServiceAccountInput!): UpdateServiceAccountPayload!
  deleteServiceAccount(input: DeleteServiceAccountInput!): DeleteServiceAccountPayload!
  serviceAccountCreateToken(input: ServiceAccountCreateTokenInput!): ServiceAccountCreateTokenPayload!
  createNamespaceMembership(input: CreateNamespaceMembershipInput!): NamespaceMembershipMutationPayload!
  updateNamespaceMembership(input: UpdateNamespaceMembershipInput!): NamespaceMembershipMutationPayload!
  deleteNamespaceMembership(input: DeleteNamespaceMembershipInput!): NamespaceMembershipMutationPayload!
  createRun(input: CreateRunInput!): RunMutationPayload!
  applyRun(input: ApplyRunInput!): RunMutationPayload!
  cancelRun(input: CancelRunInput!): RunMutationPayload!
  updatePlan(input: UpdatePlanInput!): UpdatePlanPayload!
  updateApply(input: UpdateApplyInput!): UpdateApplyPayload!
  createConfigurationVersion(input: CreateConfigurationVersionInput!): ConfigurationVersionMutationPayload!
  createStateVersion(input: CreateStateVersionInput!): CreateStateVersionPayload!
  createNamespaceVariable(input: CreateNamespaceVariableInput!): NamespaceVariableMutationPayload!
  updateNamespaceVariable(input: UpdateNamespaceVariableInput!): NamespaceVariableMutationPayload!
  deleteNamespaceVariable(input: DeleteNamespaceVariableInput!): NamespaceVariableMutationPayload!
  setNamespaceVariables(input: SetNamespaceVariablesInput!): NamespaceVariableMutationPayload!
  saveJobLogs(input: SaveJobLogsInput!): SaveJobLogsPayload!
  createTeam(input: CreateTeamInput): CreateTeamPayload!
  updateTeam(input: UpdateTeamInput): UpdateTeamPayload!
  deleteTeam(input: DeleteTeamInput): DeleteTeamPayload!
  addUserToTeam(input: AddUserToTeamInput): AddUserToTeamPayload!
  updateTeamMember(input: UpdateTeamMemberInput): UpdateTeamMemberPayload!
  removeUserFromTeam(input: RemoveUserFromTeamInput): RemoveUserFromTeamPayload!
  createTerraformProvider(input: CreateTerraformProviderInput): CreateTerraformProviderPayload!
  updateTerraformProvider(input: UpdateTerraformProviderInput): UpdateTerraformProviderPayload!
  deleteTerraformProvider(input: DeleteTerraformProviderInput): DeleteTerraformProviderPayload!
  createTerraformProviderVersion(input: CreateTerraformProviderVersionInput): CreateTerraformProviderVersionPayload!
  deleteTerraformProviderVersion(input: DeleteTerraformProviderVersionInput): DeleteTerraformProviderVersionPayload!
  createTerraformProviderPlatform(input: CreateTerraformProviderPlatformInput): CreateTerraformProviderPlatformPayload!
  deleteTerraformProviderPlatform(input: DeleteTerraformProviderPlatformInput): DeleteTerraformProviderPlatformPayload!
  createTerraformModule(input: CreateTerraformModuleInput): CreateTerraformModulePayload!
  updateTerraformModule(input: UpdateTerraformModuleInput): UpdateTerraformModulePayload!
  deleteTerraformModule(input: DeleteTerraformModuleInput): DeleteTerraformModulePayload!
  createTerraformModuleVersion(input: CreateTerraformModuleVersionInput): CreateTerraformModuleVersionPayload!
  deleteTerraformModuleVersion(input: DeleteTerraformModuleVersionInput): DeleteTerraformModuleVersionPayload!
  createTerraformModuleAttestation(input: CreateTerraformModuleAttestationInput): CreateTerraformModuleAttestationPayload!
  updateTerraformModuleAttestation(input: UpdateTerraformModuleAttestationInput): UpdateTerraformModuleAttestationPayload!
  deleteTerraformModuleAttestation(input: DeleteTerraformModuleAttestationInput): DeleteTerraformModuleAttestationPayload!
  createGPGKey(input: CreateGPGKeyInput!): CreateGPGKeyPayload!
  deleteGPGKey(input: DeleteGPGKeyInput!): DeleteGPGKeyPayload!
  createTerraformCLIDownloadURL(input: CreateTerraformCLIDownloadURLInput!): TerraformCLIMutationPayload!
  createSCIMToken: SCIMTokenPayload!
  createVCSProvider(input: CreateVCSProviderInput!): CreateVCSProviderPayload!
  updateVCSProvider(input: UpdateVCSProviderInput!): UpdateVCSProviderPayload!
  deleteVCSProvider(input: DeleteVCSProviderInput!): DeleteVCSProviderPayload!
  createWorkspaceVCSProviderLink(input: CreateWorkspaceVCSProviderLinkInput!): CreateWorkspaceVCSProviderLinkPayload!
  updateWorkspaceVCSProviderLink(input: UpdateWorkspaceVCSProviderLinkInput!): UpdateWorkspaceVCSProviderLinkPayload!
  deleteWorkspaceVCSProviderLink(input: DeleteWorkspaceVCSProviderLinkInput!): DeleteWorkspaceVCSProviderLinkPayload!
  createVCSRun(input: CreateVCSRunInput!): CreateVCSRunPayload!
  resetVCSProviderOAuthToken(input: ResetVCSProviderOAuthTokenInput!): ResetVCSProviderOAuthTokenPayload!
  createRole(input: CreateRoleInput!): CreateRolePayload!
  updateRole(input: UpdateRoleInput!): UpdateRolePayload!
  deleteRole(input: DeleteRoleInput!): DeleteRolePayload!
  claimJob(input: ClaimJobInput!): ClaimJobPayload!
  createRunner(input: CreateRunnerInput!): CreateRunnerPayload!
  updateRunner(input: UpdateRunnerInput!): UpdateRunnerPayload!
  deleteRunner(input: DeleteRunnerInput!): DeleteRunnerPayload!
  assignServiceAccountToRunner(input: AssignServiceAccountToRunnerInput!): AssignServiceAccountToRunnerPayload!
  unassignServiceAccountFromRunner(input: AssignServiceAccountToRunnerInput!): AssignServiceAccountToRunnerPayload!
}

interface Namespace {
  id: ID!
  metadata: ResourceMetadata!
  name: String!
  description: String!
  fullPath: String!
  memberships: [NamespaceMembership!]!
  variables: [NamespaceVariable!]!
  serviceAccounts(after: String, before: String, first: Int, last: Int, includeInherited: Boolean, search: String): ServiceAccountConnection!
  managedIdentities(after: String, before: String, first: Int, last: Int, sort: ManagedIdentitySort, includeInherited: Boolean, search: String): ManagedIdentityConnection!
  activityEvents(after: String, before: String, first: Int, last: Int, username: String, serviceAccountPath: String, includeNested: Boolean, timeRangeStart: Time, timeRangeEnd: Time, actions: [ActivityEventAction!], targetTypes: [ActivityEventTargetType!], sort: ActivityEventSort): ActivityEventConnection!
}

type NamespaceMembership implements Node {
  id: ID!
  metadata: ResourceMetadata!
  resourcePath: String!
  member: Member
  namespace: Namespace
  role: Role!
}

type NamespaceMembershipConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [NamespaceMembershipEdge]
}

type NamespaceMembershipEdge {
  cursor: String!
  node: NamespaceMembership
}

type NamespaceMembershipMutationPayload {
  clientMutationId: String
  namespace: Namespace
  problems: [Problem!]!
}

enum NamespaceMembershipSort {
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type NamespaceVariable implements Node {
  id: ID!
  metadata: ResourceMetadata!
  namespacePath: String!
  category: VariableCategory!
  hcl: Boolean!
  key: String!
  value: String
}

input NamespaceVariableInput {
  hcl: Boolean!
  key: String!
  value: String!
}

type NamespaceVariableMutationPayload {
  clientMutationId: String
  namespace: Namespace
  problems: [Problem!]!
}

interface Node {
  id: ID!
}

type OIDCTrustPolicy {
  issuer: String!
  boundClaims: [JWTClaim!]!
}

input OIDCTrustPolicyInput {
  issuer: String!
  boundClaims: [JWTClaimInput!]!
}

type PageInfo {
  endCursor: String
  startCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Plan implements Node {
  id: ID!
  metadata: ResourceMetadata!
  status: PlanStatus!
  hasChanges: Boolean!
  resourceAdditions: Int!
  resourceChanges: Int!
  resourceDestructions: Int!
  currentJob: Job
}

enum PlanStatus {
  canceled
  queued
  errored
  finished
  pending
  running
}

type Problem {
  message: String!
  field: [String!]
  type: ProblemType!
}

enum ProblemType {
  CONFLICT
  BAD_REQUEST
  NOT_FOUND
  FORBIDDEN
}

"""The Query type represents all of the entry points into the API."""
type Query {
  me: MeResponse
  node(id: String!): Node
  namespace(fullPath: String!): Namespace
  group(fullPath: String!): Group
  groups(after: String, before: String, first: Int, last: Int, parentPath: String, search: String, sort: GroupSort): GroupConnection!
  workspace(fullPath: String!): Workspace
  workspaces(after: String, before: String, first: Int, last: Int, groupPath: String, search: String, sort: WorkspaceSort): WorkspaceConnection!
  terraformProviders(after: String, before: String, first: Int, last: Int, search: String, sort: TerraformProviderSort): TerraformProviderConnection!
  terraformProvider(registryNamespace: String!, providerName: String!): TerraformProvider
  terraformProviderVersion(registryNamespace: String!, providerName: String!, version: String): TerraformProviderVersion
  terraformModules(after: String, before: String, first: Int, last: Int, search: String, sort: TerraformModuleSort): TerraformModuleConnection!
  terraformModule(registryNamespace: String!, moduleName: String!, system: String!): TerraformModule
  terraformModuleVersion(registryNamespace: String!, moduleName: String!, system: String!, version: String): TerraformModuleVersion
  run(id: String!): Run
  runs(after: String, before: String, first: Int, last: Int, workspacePath: String, workspaceId: String, sort: RunSort): RunConnection!
  job(id: String!): Job
  managedIdentity(id: String!): ManagedIdentity
  serviceAccount(id: String!): ServiceAccount
  users(after: String, before: String, first: Int, last: Int, search: String, sort: UserSort): UserConnection!
  configurationVersion(id: String!): ConfigurationVersion
  team(name: String!): Team
  teams(after: String, before: String, first: Int, last: Int, search: String, sort: TeamSort): TeamConnection!
  terraformCLIVersions: TerraformCLIVersions

  """There is no query for an activity event by ID."""
  activityEvents(after: String, before: String, first: Int, last: Int, username: String, serviceAccountPath: String, namespacePath: String, includeNested: Boolean, timeRangeStart: Time, timeRangeEnd: Time, actions: [ActivityEventAction!], targetTypes: [ActivityEventTargetType!], sort: ActivityEventSort): ActivityEventConnection!
  role(name: String!): Role
  roles(after: String, before: String, first: Int, last: Int, search: String, sort: RoleSort): RoleConnection!
  availableRolePermissions: [String!]!
  authSettings: AuthSettings
}

input RemoveUserFromTeamInput {
  clientMutationId: String
  username: String!
  teamName: String!
  metadata: ResourceMetadataInput
}

type RemoveUserFromTeamPayload {
  clientMutationId: String
  teamMember: TeamMember
  problems: [Problem!]!
}

input ResetVCSProviderOAuthTokenInput {
  clientMutationId: String
  providerId: String!
}

type ResetVCSProviderOAuthTokenPayload {
  clientMutationId: String
  vcsProvider: VCSProvider
  oAuthAuthorizationUrl: String!
  problems: [Problem!]!
}

type ResourceMetadata {
  version: String!
  createdAt: Time!
  updatedAt: Time!
}

input ResourceMetadataInput {
  version: String!
}

type Role implements Node {
  id: ID!
  metadata: ResourceMetadata!
  createdBy: String!
  name: String!
  description: String!
  permissions: [String!]!
}

type RoleConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RoleEdge]
}

type RoleEdge {
  cursor: String!
  node: Role
}

enum RoleSort {
  NAME_ASC
  NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Run implements Node {
  id: ID!
  metadata: ResourceMetadata!
  createdBy: String!
  status: RunStatus!
  isDestroy: Boolean!
  workspace: Workspace!
  configurationVersion: ConfigurationVersion
  plan: Plan!
  apply: Apply
  variables: [RunVariable!]!
  moduleSource: String
  moduleVersion: String
  moduleDigest: String
  forceCanceledBy: String
  forceCanceled: Boolean!
  forceCancelAvailableAt: Time
  comment: String!
  terraformVersion: String!
}

type RunConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RunEdge]
}

type RunEdge {
  cursor: String!
  node: Run
}

type RunEvent {
  action: String!
  run: Run!
}

type RunMutationPayload {
  clientMutationId: String
  run: Run
  problems: [Problem!]!
}

type Runner implements Node {
  id: ID!
  metadata: ResourceMetadata!
  groupPath: String!
  resourcePath: String!
  name: String!
  description: String!
  group: Group!
  createdBy: String!
  type: String!
  assignedServiceAccounts(after: String, before: String, first: Int, last: Int): ServiceAccountConnection!
}

type RunnerConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [RunnerEdge]
}

type RunnerEdge {
  cursor: String!
  node: Runner
}

enum RunnerSort {
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum RunSort {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum RunStatus {
  applied
  apply_queued
  applying
  canceled
  errored
  pending
  plan_queued
  planned
  planned_and_finished
  planning
}

input RunSubscriptionInput {
  workspacePath: String!
  runId: String
}

type RunVariable {
  namespacePath: String
  category: VariableCategory!
  hcl: Boolean!
  key: String!
  value: String
}

input RunVariableInput {
  category: VariableCategory!
  hcl: Boolean!
  key: String!
  value: String!
}

input SaveJobLogsInput {
  clientMutationId: String
  logs: String!
  jobId: String!
  startOffset: Int!
}

type SaveJobLogsPayload {
  clientMutationId: String
  problems: [Problem!]!
}

type SCIMTokenPayload {
  clientMutationId: String
  token: String
  problems: [Problem!]!
}

type ServiceAccount implements Node {
  id: ID!
  metadata: ResourceMetadata!
  groupPath: String!
  resourcePath: String!
  name: String!
  description: String!
  group: Group!
  createdBy: String!
  oidcTrustPolicies: [OIDCTrustPolicy!]!
  namespaceMemberships(after: String, before: String, first: Int, last: Int): NamespaceMembershipConnection!
  activityEvents(after: String, before: String, first: Int, last: Int, namespacePath: String, timeRangeStart: Time, timeRangeEnd: Time, actions: [ActivityEventAction!], targetTypes: [ActivityEventTargetType!], sort: ActivityEventSort): ActivityEventConnection!
}

type ServiceAccountConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ServiceAccountEdge]
}

input ServiceAccountCreateTokenInput {
  clientMutationId: String
  serviceAccountPath: String!
  token: String!
}

type ServiceAccountCreateTokenPayload {
  clientMutationId: String
  token: String
  expiresIn: Int
  problems: [Problem!]!
}

type ServiceAccountEdge {
  cursor: String!
  node: ServiceAccount
}

enum ServiceAccountSort {
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

input SetNamespaceVariablesInput {
  clientMutationId: String
  namespacePath: String!
  category: VariableCategory!
  variables: [NamespaceVariableInput!]!
}

type StateVersion implements Node {
  id: ID!
  metadata: ResourceMetadata!
  run: Run
  outputs: [StateVersionOutput!]!
  resources: [StateVersionResource!]!
  dependencies: [StateVersionDependency!]!
  data: String!
  createdBy: String!
}

type StateVersionConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [StateVersionEdge]
}

type StateVersionDependency {
  workspacePath: String!
  workspace: Workspace
  stateVersion: StateVersion
}

type StateVersionEdge {
  cursor: String!
  node: StateVersion
}

type StateVersionOutput implements Node {
  id: ID!
  metadata: ResourceMetadata!
  name: String!
  value: String!
  type: String!
  sensitive: Boolean!
}

type StateVersionResource {
  module: String!
  mode: String!
  type: String!
  name: String!
  provider: String!
}

enum StateVersionSort {
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Subscription {
  workspaceRunEvents(input: RunSubscriptionInput!): RunEvent!
  workspaceEvents(input: WorkspaceSubscriptionInput!): WorkspaceEvent!
  jobLogEvents(input: JobLogSubscriptionInput!): JobLogEvent!
  jobCancellationEvent(input: JobCancellationEventSubscriptionInput!): JobCancellationEvent!
}

type Team implements Node {
  id: ID!
  metadata: ResourceMetadata!
  name: String!
  description: String!
  scimExternalId: String
  members(after: String, before: String, first: Int, last: Int, sort: TeamMemberSort): TeamMemberConnection!
}

type TeamConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TeamEdge]
}

type TeamEdge {
  cursor: String!
  node: Team
}

"""TeamMember and friends:"""
type TeamMember {
  id: ID!
  metadata: ResourceMetadata!
  user: User!
  team: Team!
  isMaintainer: Boolean!
}

type TeamMemberConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TeamMemberEdge]
}

type TeamMemberEdge {
  cursor: String!
  node: TeamMember
}

enum TeamMemberSort {
  USERNAME_ASC
  USERNAME_DESC
}

"""Team and friends:"""
enum TeamSort {
  NAME_ASC
  NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type TerraformCLIMutationPayload {
  clientMutationId: String
  downloadUrl: String!
  problems: [Problem!]!
}

type TerraformCLIVersions {
  versions: [String!]!
}

type TerraformModule implements Node {
  id: ID!
  metadata: ResourceMetadata!
  createdBy: String!
  source: String!
  name: String!
  system: String!
  group: Group!
  private: Boolean!
  repositoryUrl: String!
  registryNamespace: String!
  groupPath: String!
  resourcePath: String!
  latestVersion: TerraformModuleVersion
  versions(after: String, before: String, first: Int, last: Int, sort: TerraformModuleVersionSort): TerraformModuleVersionConnection!
  attestations(after: String, before: String, first: Int, last: Int, digest: String, sort: TerraformModuleAttestationSort): TerraformModuleAttestationConnection!
}

type TerraformModuleAttestation implements Node {
  id: ID!
  metadata: ResourceMetadata!
  createdBy: String!
  description: String!
  module: TerraformModule!
  schemaType: String!
  predicateType: String!
  digests: [String!]!
  data: String!
}

type TerraformModuleAttestationConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TerraformModuleAttestationEdge]
}

type TerraformModuleAttestationEdge {
  cursor: String!
  node: TerraformModuleAttestation
}

enum TerraformModuleAttestationSort {
  PREDICATE_TYPE_ASC
  PREDICATE_TYPE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

type TerraformModuleConfigurationDetails {
  path: String!
  readme: String!
  requiredCore: [String!]!
  variables: [TerraformModuleConfigurationDetailsVariable!]!
  outputs: [TerraformModuleConfigurationDetailsOutput!]!
  requiredProviders: [TerraformModuleConfigurationDetailsProviderRequirement!]!
  providerConfigs: [TerraformModuleConfigurationDetailsProviderRef!]!
  managedResources: [TerraformModuleConfigurationDetailsResource!]!
  dataResources: [TerraformModuleConfigurationDetailsResource!]!
  moduleCalls: [TerraformModuleConfigurationDetailsModuleCall!]!
}

type TerraformModuleConfigurationDetailsModuleCall {
  name: String!
  source: String!
  version: String!
}

type TerraformModuleConfigurationDetailsOutput {
  name: String!
  description: String!
  sensitive: Boolean!
}

type TerraformModuleConfigurationDetailsProviderRef {
  name: String!
  alias: String!
}

type TerraformModuleConfigurationDetailsProviderRequirement {
  source: String!
  versionConstraints: [String!]!
  configurationAliases: [TerraformModuleConfigurationDetailsProviderRef!]!
}

type TerraformModuleConfigurationDetailsResource {
  mode: String!
  name: String!
  type: String!
  provider: TerraformModuleConfigurationDetailsProviderRef!
}

type TerraformModuleConfigurationDetailsVariable {
  name: String!
  type: String!
  description: String!
  default: String
  required: Boolean!
  sensitive: Boolean!
}

type TerraformModuleConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TerraformModuleEdge]
}

type TerraformModuleEdge {
  cursor: String!
  node: TerraformModule
}

"""The End."""
enum TerraformModuleSort {
  NAME_ASC
  NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type TerraformModuleVersion implements Node {
  id: ID!
  metadata: ResourceMetadata!
  module: TerraformModule!
  version: String!
  status: String!
  error: String!
  diagnostics: String!
  shaSum: String!
  latest: Boolean!
  createdBy: String!
  submodules: [String!]!
  examples: [String!]!
  configurationDetails(path: String!): TerraformModuleConfigurationDetails
  attestations(after: String, before: String, first: Int, last: Int, sort: TerraformModuleAttestationSort): TerraformModuleAttestationConnection!
}

type TerraformModuleVersionConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TerraformModuleVersionEdge]
}

type TerraformModuleVersionEdge {
  cursor: String!
  node: TerraformModuleVersion
}

enum TerraformModuleVersionSort {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type TerraformProvider implements Node {
  id: ID!
  metadata: ResourceMetadata!
  createdBy: String!
  name: String!
  group: Group!
  private: Boolean!
  repositoryUrl: String!
  registryNamespace: String!
  source: String!
  groupPath: String!
  resourcePath: String!
  latestVersion: TerraformProviderVersion
  versions(after: String, before: String, first: Int, last: Int, sort: TerraformProviderVersionSort): TerraformProviderVersionConnection!
}

type TerraformProviderConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TerraformProviderEdge]
}

type TerraformProviderEdge {
  cursor: String!
  node: TerraformProvider
}

type TerraformProviderPlatform implements Node {
  id: ID!
  metadata: ResourceMetadata!
  providerVersion: TerraformProviderVersion!
  os: String!
  arch: String!
  shaSum: String!
  filename: String!
  binaryUploaded: Boolean!
}

enum TerraformProviderSort {
  NAME_ASC
  NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type TerraformProviderVersion implements Node {
  id: ID!
  metadata: ResourceMetadata!
  provider: TerraformProvider!
  version: String!
  gpgKeyId: String
  gpgAsciiArmor: String
  protocols: [String!]!
  shaSumsUploaded: Boolean!
  shaSumsSigUploaded: Boolean!
  readmeUploaded: Boolean!
  readme: String!
  platforms: [TerraformProviderPlatform!]!
  latest: Boolean!
  createdBy: String!
}

type TerraformProviderVersionConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TerraformProviderVersionEdge]
}

type TerraformProviderVersionEdge {
  cursor: String!
  node: TerraformProviderVersion
}

enum TerraformProviderVersionSort {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  VERSION_ASC
  VERSION_DESC
}

"""Time represented in ISO 8601"""
scalar Time

input UpdateApplyInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
  status: ApplyStatus!
}

type UpdateApplyPayload {
  clientMutationId: String
  apply: Apply
  problems: [Problem!]!
}

input UpdateGroupInput {
  clientMutationId: String
  groupPath: String
  id: String
  description: String
  metadata: ResourceMetadataInput
}

type UpdateGroupPayload {
  clientMutationId: String
  group: Group
  problems: [Problem!]!
}

input UpdateManagedIdentityAccessRuleInput {
  clientMutationId: String
  id: ID!
  runStage: JobType!
  moduleAttestationPolicies: [ManagedIdentityAccessRuleModuleAttestationPolicyInput!]
  allowedServiceAccounts: [String!]
  allowedUsers: [String!]
  allowedTeams: [String!]
}

input UpdateManagedIdentityInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
  description: String!
  data: String!
}

type UpdateManagedIdentityPayload {
  clientMutationId: String
  managedIdentity: ManagedIdentity
  problems: [Problem!]!
}

input UpdateNamespaceMembershipInput {
  clientMutationId: String
  id: String!
  role: String!
  metadata: ResourceMetadataInput
}

input UpdateNamespaceVariableInput {
  clientMutationId: String
  id: String!
  hcl: Boolean!
  key: String!
  value: String!
}

input UpdatePlanInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
  status: PlanStatus!
  hasChanges: Boolean!
  resourceAdditions: Int!
  resourceChanges: Int!
  resourceDestructions: Int!
}

type UpdatePlanPayload {
  clientMutationId: String
  plan: Plan
  problems: [Problem!]!
}

input UpdateRoleInput {
  clientMutationId: String
  id: ID!
  description: String
  permissions: [String!]!
  metadata: ResourceMetadataInput
}

type UpdateRolePayload {
  clientMutationId: String
  role: Role
  problems: [Problem!]!
}

input UpdateRunnerInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
  description: String!
}

type UpdateRunnerPayload {
  clientMutationId: String
  runner: Runner
  problems: [Problem!]!
}

input UpdateServiceAccountInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
  description: String!
  oidcTrustPolicies: [OIDCTrustPolicyInput!]!
}

type UpdateServiceAccountPayload {
  clientMutationId: String
  serviceAccount: ServiceAccount
  problems: [Problem!]!
}

input UpdateTeamInput {
  clientMutationId: String
  name: String!
  description: String!
  metadata: ResourceMetadataInput
}

input UpdateTeamMemberInput {
  clientMutationId: String
  username: String!
  teamName: String!
  isMaintainer: Boolean!
  metadata: ResourceMetadataInput
}

type UpdateTeamMemberPayload {
  clientMutationId: String
  teamMember: TeamMember
  problems: [Problem!]!
}

type UpdateTeamPayload {
  clientMutationId: String
  team: Team
  problems: [Problem!]!
}

input UpdateTerraformModuleAttestationInput {
  clientMutationId: String
  id: String!
  description: String!
}

type UpdateTerraformModuleAttestationPayload {
  clientMutationId: String
  moduleAttestation: TerraformModuleAttestation
  problems: [Problem!]!
}

input UpdateTerraformModuleInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
  private: Boolean
  repositoryUrl: String
}

type UpdateTerraformModulePayload {
  clientMutationId: String
  module: TerraformModule
  problems: [Problem!]!
}

input UpdateTerraformProviderInput {
  clientMutationId: String
  id: ID!
  metadata: ResourceMetadataInput
  private: Boolean
  repositoryUrl: String
}

type UpdateTerraformProviderPayload {
  clientMutationId: String
  provider: TerraformProvider
  problems: [Problem!]!
}

input UpdateVCSProviderInput {
  clientMutationId: String
  id: ID!
  description: String
  oAuthClientId: String
  oAuthClientSecret: String
  metadata: ResourceMetadataInput
}

type UpdateVCSProviderPayload {
  clientMutationId: String
  vcsProvider: VCSProvider
  problems: [Problem!]!
}

input UpdateWorkspaceInput {
  clientMutationId: String
  workspacePath: String
  id: String
  metadata: ResourceMetadataInput
  description: String
  maxJobDuration: Int
  terraformVersion: String
  preventDestroyPlan: Boolean
}

type UpdateWorkspacePayload {
  clientMutationId: String
  workspace: Workspace
  problems: [Problem!]!
}

input UpdateWorkspaceVCSProviderLinkInput {
  clientMutationId: String
  id: ID!
  moduleDirectory: String
  branch: String
  tagRegex: String
  globPatterns: [String!]!
  autoSpeculativePlan: Boolean
  webhookDisabled: Boolean
  metadata: ResourceMetadataInput
}

type UpdateWorkspaceVCSProviderLinkPayload {
  clientMutationId: String
  vcsProviderLink: WorkspaceVCSProviderLink
  problems: [Problem!]!
}

type User implements Node {
  id: ID!
  metadata: ResourceMetadata!
  username: String!
  email: String!
  namespaceMemberships(after: String, before: String, first: Int, last: Int): NamespaceMembershipConnection!
  admin: Boolean!
  active: Boolean!
  scimExternalId: String
  activityEvents(after: String, before: String, first: Int, last: Int, namespacePath: String, timeRangeStart: Time, timeRangeEnd: Time, actions: [ActivityEventAction!], targetTypes: [ActivityEventTargetType!], sort: ActivityEventSort): ActivityEventConnection!
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  cursor: String!
  node: User
}

enum UserSort {
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum VariableCategory {
  terraform
  environment
}

type VCSEvent implements Node {
  id: ID!
  metadata: ResourceMetadata!
  errorMessage: String
  commitId: String
  sourceReferenceName: String
  workspace: Workspace!
  repositoryUrl: String!
  type: String!
  status: String!
}

type VCSEventConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VCSEventEdge]
}

type VCSEventEdge {
  cursor: String!
  node: VCSEvent
}

enum VCSEventSort {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type VCSProvider implements Node {
  id: ID!
  metadata: ResourceMetadata!
  createdBy: String!
  name: String!
  description: String!
  group: Group!
  url: String!
  groupPath: String!
  resourcePath: String!
  type: VCSProviderType!
  autoCreateWebhooks: Boolean!
}

type VCSProviderConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VCSProviderEdge]
}

type VCSProviderEdge {
  cursor: String!
  node: VCSProvider
}

enum VCSProviderSort {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum VCSProviderType {
  gitlab
  github
}

type Workspace implements Node & Namespace {
  id: ID!
  metadata: ResourceMetadata!
  name: String!
  description: String!
  groupPath: String!
  fullPath: String!
  group: Group!
  dirtyState: Boolean!
  locked: Boolean!
  assignedManagedIdentities: [ManagedIdentity!]!
  managedIdentities(after: String, before: String, first: Int, last: Int, sort: ManagedIdentitySort, includeInherited: Boolean, search: String): ManagedIdentityConnection!
  serviceAccounts(after: String, before: String, first: Int, last: Int, includeInherited: Boolean, search: String): ServiceAccountConnection!
  stateVersions(after: String, before: String, first: Int, last: Int, sort: StateVersionSort): StateVersionConnection!
  memberships: [NamespaceMembership!]!
  variables: [NamespaceVariable!]!
  currentStateVersion: StateVersion
  currentJob: Job
  maxJobDuration: Int!
  createdBy: String!
  terraformVersion: String!
  activityEvents(after: String, before: String, first: Int, last: Int, username: String, serviceAccountPath: String, includeNested: Boolean, timeRangeStart: Time, timeRangeEnd: Time, actions: [ActivityEventAction!], targetTypes: [ActivityEventTargetType!], sort: ActivityEventSort): ActivityEventConnection!
  preventDestroyPlan: Boolean!
  vcsProviders(after: String, before: String, first: Int, last: Int, includeInherited: Boolean, search: String): VCSProviderConnection!
  workspaceVcsProviderLink: WorkspaceVCSProviderLink
  vcsEvents(after: String, before: String, first: Int, last: Int, sort: VCSEventSort): VCSEventConnection!
}

type WorkspaceConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [WorkspaceEdge]
}

type WorkspaceEdge {
  cursor: String!
  node: Workspace
}

type WorkspaceEvent {
  action: String!
  workspace: Workspace!
}

enum WorkspaceSort {
  FULL_PATH_ASC
  FULL_PATH_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

input WorkspaceSubscriptionInput {
  workspacePath: String!
}

type WorkspaceVCSProviderLink implements Node {
  id: ID!
  metadata: ResourceMetadata!
  createdBy: String!
  workspace: Workspace!
  vcsProvider: VCSProvider!
  repositoryPath: String!
  webhookId: String
  moduleDirectory: String
  branch: String!
  tagRegex: String
  globPatterns: [String!]!
  autoSpeculativePlan: Boolean!
  webhookDisabled: Boolean!
}
