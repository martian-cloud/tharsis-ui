include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

stages:
  - pre-build
  - test
  - publish

# Only start pipelines on Merge Requests or the default branch
workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_MERGE_REQUEST_IID
      when: always
    - if: $CI_COMMIT_TAG
      when: always
    - when: never

# Use SHA of .gitlab-ci.yml and package-lock.json for cache key
.cache-template: &cache-template
  paths:
    - node_modules/
  key:
    files:
      - .gitlab-ci.yml
      - package-lock.json
    prefix: node_modules

.node:
  image: node:16-alpine
  before_script:
    - npm install --legacy-peer-deps
  cache:
    <<: *cache-template
    policy: pull

default:
  image: public.ecr.aws/amazonlinux/amazonlinux:latest
  services: []
  tags:
    - oss
  retry:
    max: 2
    when:
      - unknown_failure
      - api_failure
      - stuck_or_timeout_failure
      - runner_system_failure

populate_npm_cache:
  extends: .node
  stage: pre-build
  script:
    - echo "successfully installed dependencies"
  cache:
    <<: *cache-template
    policy: push
  rules:
    - changes:
        - .gitlab-ci.yml
        - package-lock.json
      when: always
    - when: never

lint:
  extends: .node
  stage: test
  script:
    - npm run lint

package:
  extends: .node
  stage: test
  variables:
    KUBERNETES_MEMORY_REQUEST: 2Gi
    KUBERNETES_MEMORY_LIMIT: 4Gi
  script:
    - npm run build

code_quality:
  artifacts:
    paths:
      - gl-code-quality-report.json
  tags:
    - oss
    - docker
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
  interruptible: true

secret_detection:
  interruptible: true

gemnasium-dependency_scanning:
  script:
    - /analyzer run
    - cat gl-dependency-scanning-report.json
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
    paths:
      - gl-dependency-scanning-report.json
      - gl-sbom-*.cdx.json
  rules:
    - exists:
        - "{Gemfile.lock,*/Gemfile.lock,*/*/Gemfile.lock}"
        - "{composer.lock,*/composer.lock,*/*/composer.lock}"
        - "{gems.locked,*/gems.locked,*/*/gems.locked}"
        - "{go.sum,*/go.sum,*/*/go.sum}"
        - "{npm-shrinkwrap.json,*/npm-shrinkwrap.json,*/*/npm-shrinkwrap.json}"
        - "{package-lock.json,*/package-lock.json,*/*/package-lock.json}"
        - "{yarn.lock,*/yarn.lock,*/*/yarn.lock}"
        - "{packages.lock.json,*/packages.lock.json,*/*/packages.lock.json}"
        - "{conan.lock,*/conan.lock,*/*/conan.lock}"
  interruptible: true

publish ui docker:
  image: docker:latest
  services:
    - docker:dind
  stage: publish
  before_script:
    - apk add git npm
  variables:
    KUBERNETES_MEMORY_REQUEST: 2Gi
    KUBERNETES_MEMORY_LIMIT: 4Gi
    KUBERNETES_SERVICE_MEMORY_REQUEST: 1Gi
    KUBERNETES_SERVICE_MEMORY_LIMIT: 2Gi
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      echo "This is a tagged commit so major, major.minor and full tags will be pushed to registry"

      # Version is based on semantic versioning
      full_version=$(docker run --rm -v "$(pwd)":/git-semver mdomke/git-semver | grep -Eo '[0-9\.].*$')
      major_version=$(docker run --rm -v "$(pwd)":/git-semver mdomke/git-semver -format x | grep -Eo '[0-9\.].*$')
      major_minor_version=$(docker run --rm -v "$(pwd)":/git-semver mdomke/git-semver -format x.y | grep -Eo '[0-9\.].*$')

      docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"

      echo "Building tharsis-ui image"
      export GENERATE_SOURCEMAP=false
      export NODE_OPTIONS=--max-old-space-size=1024
      npm install --legacy-peer-deps
      npm run build
      docker build -t $CI_PROJECT_NAME:latest --no-cache .

      registry_uri="$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME"

      echo "Version tagging the ui image"
      docker image tag $CI_PROJECT_NAME:latest $registry_uri:$full_version
      docker image tag $CI_PROJECT_NAME:latest $registry_uri:$major_version
      docker image tag $CI_PROJECT_NAME:latest $registry_uri:$major_minor_version

      echo "Pushing tharsis-ui versioned images to registry"
      docker image push $registry_uri:$full_version
      docker image push $registry_uri:$major_version
      docker image push $registry_uri:$major_minor_version

      latest_version=$(git tag | tr - \~ | sort -rV | tr \~ - | head -n1)
      if [[ "$CI_COMMIT_TAG" == "$latest_version" ]]
        then
          echo "Build is latest, tagging and pushing image as latest"
          docker image tag $CI_PROJECT_NAME:latest $registry_uri:latest
          docker image push $registry_uri:latest
      fi
  tags:
    - oss
    - docker
